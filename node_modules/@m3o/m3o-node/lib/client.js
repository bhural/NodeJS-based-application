"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
const ws_1 = __importDefault(require("ws"));
const axios = __importStar(require("axios"));
const url = __importStar(require("url"));
const stream_1 = require("./stream");
const defaultPrefix = 'v1/';
const defaultLocal = 'http://localhost:8080/';
const defaultLive = 'https://api.m3o.com/';
class Client {
    constructor(options) {
        this.options = {
            address: defaultLive,
            prefix: defaultPrefix,
            local: false,
        };
        if (options) {
            if (options.token) {
                this.options.token = options.token;
            }
            if (options.local) {
                this.options.local = true;
                this.options.address = defaultLocal;
            }
            if (options.address) {
                this.options.address = options.address;
            }
            if (typeof options.prefix == 'string') {
                this.options.prefix = options.prefix;
            }
        }
    }
    // Call enables you to access any endpoint of any service on Micro
    call(service, endpoint, req) {
        return new Promise((resolve, reject) => {
            try {
                // example curl: curl -XPOST -d '{"service": "go.micro.srv.greeter", "endpoint": "Say.Hello"}'
                //  -H 'Content-Type: application/json' http://localhost:8080/client {"body":"eyJtc2ciOiJIZWxsbyAifQ=="}
                if (req === undefined || req === null) {
                    req = {};
                }
                const headers = {};
                if (this.options.token) {
                    headers['authorization'] = 'Bearer ' + this.options.token;
                }
                const options = {
                    method: 'post',
                    //json: true,
                    responseType: 'json',
                    headers: headers,
                    data: req,
                    url: this.options.address +
                        this.options.prefix +
                        service +
                        '/' +
                        endpoint,
                };
                return axios
                    .default(options)
                    .then(res => {
                    resolve(res.data);
                })
                    .catch(error => {
                    if (error.response) {
                        reject(error.response.data);
                        return;
                    }
                    reject(error);
                });
            }
            catch (e) {
                reject(e);
            }
        });
    }
    stream(service, endpoint, msg) {
        return new Promise((resolve, reject) => {
            try {
                const uri = url.parse(this.options.address);
                // TODO: make optional
                uri.path = '/' + this.options.prefix + service + '/' + endpoint;
                uri.pathname = '/' + this.options.prefix + service + '/' + endpoint;
                uri.protocol = uri.protocol.replace('http', 'ws');
                const conn = new ws_1.default(url.format(uri), {
                    headers: {
                        'Content-Type': 'application/json',
                        Authorization: 'Bearer ' + this.options.token,
                    },
                });
                conn.on('open', function open() {
                    conn.send(JSON.stringify(msg));
                    const stream = new stream_1.Stream(conn, service, endpoint);
                    resolve(stream);
                });
            }
            catch (e) {
                reject(e);
            }
        });
    }
}
exports.Client = Client;
