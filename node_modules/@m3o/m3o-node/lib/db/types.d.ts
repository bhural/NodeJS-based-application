export declare type DBMethods = 'Create' | 'Delete' | 'Read' | 'Truncate' | 'Update';
export declare type DBCreatePayload<R, TN> = {
    record: R;
    table: TN;
};
export declare type DBCreateResponse = {
    id: string;
};
export declare type DBDeletePayload<TN> = {
    id: string;
    table: TN;
};
export declare type DBReadPayload = {
    id?: string;
    limit?: number;
    offset?: number;
    order?: 'asc' | 'desc';
    orderBy?: string;
    query?: string;
    table?: string;
};
export declare type DBReadResponse<R> = {
    records?: R[];
};
export declare type DBCreate<R, TN> = (payload: DBCreatePayload<R, TN>) => Promise<DBCreateResponse>;
export declare type DBTruncatePayload<TN> = {
    table?: TN;
};
export declare type DBTruncateTableResponse = {
    table: string;
};
export declare type DBUpdatePayload<R, TN> = {
    id: string;
    record: R;
    table?: TN;
};
export declare type DBDelete<TN> = (payload: DBDeletePayload<TN>) => Promise<void>;
export declare type DBRead<R> = (payload: DBReadPayload) => Promise<DBReadResponse<R>>;
export declare type DBTruncate<TN> = (payload: DBTruncatePayload<TN>) => Promise<DBTruncateTableResponse>;
export declare type DBUpdate<R, TN> = (payload: DBUpdatePayload<R, TN>) => Promise<void>;
export declare type DBApi<R, TN> = {
    create: DBCreate<R, TN>;
    delete: DBDelete<TN>;
    read: DBRead<R>;
    truncate: DBTruncate<TN>;
    update: DBUpdate<R, TN>;
};
