"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Stream = void 0;
class Stream {
    constructor(conn, service, endpoint) {
        this.conn = conn;
        this.service = service;
        this.endpoint = endpoint;
    }
    send(msg) {
        return new Promise((resolve, reject) => {
            this.conn.send(msg, function (err) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve();
            });
        });
    }
    // DEPRECATED!
    // Receive messages. same as onError and only here for backwards compatibility
    recv(cb) {
        this.onMessage(cb);
    }
    // Register a callback to receive messages
    onMessage(cb) {
        this.conn.on('message', (m) => {
            cb(JSON.parse(m));
        });
    }
    // Register a callback for errors
    onError(errCb) {
        this.conn.on('error', function err(e) {
            errCb(e);
        });
    }
    // Register a callback for when the stream is closed
    onClose(closeCb) {
        this.conn.on('close', function close(e, reason) {
            closeCb(new Error('closed with error ' + reason));
        });
    }
}
exports.Stream = Stream;
// function marshalRequest(service: string, endpoint: string, v: any): string {
//   const jsonBody = JSON.stringify(v);
//   return JSON.stringify({
//     service: service,
//     endpoint: endpoint,
//     body: Buffer.from(jsonBody).toString('base64'),
//   });
// }
// function unmarshalResponse(msg: string): any {
//   const rsp: ClientResponse = JSON.parse(msg);
//   return Buffer.from(rsp.body, 'base64').toString();
// }
