export declare class FunctionService {
    private client;
    constructor(token: string);
    call(request: CallRequest): Promise<CallResponse>;
    delete(request: DeleteRequest): Promise<DeleteResponse>;
    deploy(request: DeployRequest): Promise<DeployResponse>;
    describe(request: DescribeRequest): Promise<DescribeResponse>;
    list(request: ListRequest): Promise<ListResponse>;
    logs(request: LogsRequest): Promise<LogsResponse>;
    proxy(request: ProxyRequest): Promise<ProxyResponse>;
    regions(request: RegionsRequest): Promise<RegionsResponse>;
    reserve(request: ReserveRequest): Promise<ReserveResponse>;
    runtimes(request: RuntimesRequest): Promise<RuntimesResponse>;
    update(request: UpdateRequest): Promise<UpdateResponse>;
}
export interface CallRequest {
    name?: string;
    request?: {
        [key: string]: any;
    };
}
export interface CallResponse {
    response?: {
        [key: string]: any;
    };
}
export interface DeleteRequest {
    name?: string;
}
export interface DeleteResponse {
}
export interface DeployRequest {
    branch?: string;
    entrypoint?: string;
    env_vars?: {
        [key: string]: string;
    };
    name?: string;
    region?: string;
    repo?: string;
    runtime?: string;
    source?: string;
    subfolder?: string;
}
export interface DeployResponse {
    function?: Func;
}
export interface DescribeRequest {
    name?: string;
}
export interface DescribeResponse {
    function?: Func;
}
export interface Func {
    branch?: string;
    created?: string;
    entrypoint?: string;
    env_vars?: {
        [key: string]: string;
    };
    id?: string;
    name?: string;
    region?: string;
    repo?: string;
    runtime?: string;
    source?: string;
    status?: string;
    subfolder?: string;
    updated?: string;
    url?: string;
}
export interface ListRequest {
}
export interface ListResponse {
    functions?: Func[];
}
export interface LogsRequest {
    logs_type?: string;
    name?: string;
}
export interface LogsResponse {
    logs?: string;
}
export interface ProxyRequest {
    id?: string;
}
export interface ProxyResponse {
    url?: string;
}
export interface RegionsRequest {
}
export interface RegionsResponse {
    regions?: string[];
}
export interface Reservation {
    created?: string;
    expires?: string;
    name?: string;
    owner?: string;
    token?: string;
}
export interface ReserveRequest {
    name?: string;
}
export interface ReserveResponse {
    reservation?: {
        [key: string]: any;
    };
}
export interface RuntimesRequest {
}
export interface RuntimesResponse {
    runtimes?: string[];
}
export interface UpdateRequest {
    name?: string;
    source?: string;
}
export interface UpdateResponse {
}
