import * as m3o from "@m3o/m3o-node";
export class FunctionService {
    constructor(token) {
        this.client = new m3o.Client({ token: token });
    }
    // Call a function by name
    call(request) {
        return this.client.call("function", "Call", request);
    }
    // Delete a function by name
    delete(request) {
        return this.client.call("function", "Delete", request);
    }
    // Deploy a group of functions
    deploy(request) {
        return this.client.call("function", "Deploy", request);
    }
    // Get the info for a deployed function
    describe(request) {
        return this.client.call("function", "Describe", request);
    }
    // List all the deployed functions
    list(request) {
        return this.client.call("function", "List", request);
    }
    // Get the logs for a function
    logs(request) {
        return this.client.call("function", "Logs", request);
    }
    // Return the backend url for proxying
    proxy(request) {
        return this.client.call("function", "Proxy", request);
    }
    // Return a list of supported regions
    regions(request) {
        return this.client.call("function", "Regions", request);
    }
    // Reserve function names and resources beyond free quota
    reserve(request) {
        return this.client.call("function", "Reserve", request);
    }
    // Return a list of supported runtimes
    runtimes(request) {
        return this.client.call("function", "Runtimes", request);
    }
    // Update a function. Downloads the source, builds and redeploys
    update(request) {
        return this.client.call("function", "Update", request);
    }
}
