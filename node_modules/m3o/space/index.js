"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpaceService = void 0;
var m3o = __importStar(require("@m3o/m3o-node"));
var SpaceService = /** @class */ (function () {
    function SpaceService(token) {
        this.client = new m3o.Client({ token: token });
    }
    // Create an object. Returns error if object with this name already exists. Max object size of 10MB, see Upload endpoint for larger objects. If you want to update an existing object use the `Update` endpoint
    SpaceService.prototype.create = function (request) {
        return this.client.call("space", "Create", request);
    };
    // Delete an object from space
    SpaceService.prototype.delete = function (request) {
        return this.client.call("space", "Delete", request);
    };
    // Download an object via a presigned url
    SpaceService.prototype.download = function (request) {
        return this.client.call("space", "Download", request);
    };
    // Retrieve meta information about an object
    SpaceService.prototype.head = function (request) {
        return this.client.call("space", "Head", request);
    };
    // List the objects in space
    SpaceService.prototype.list = function (request) {
        return this.client.call("space", "List", request);
    };
    // Read an object in space
    SpaceService.prototype.read = function (request) {
        return this.client.call("space", "Read", request);
    };
    // Update an object. If an object with this name does not exist, creates a new one.
    SpaceService.prototype.update = function (request) {
        return this.client.call("space", "Update", request);
    };
    // Upload a large object (> 10MB). Returns a time limited presigned URL to be used for uploading the object
    SpaceService.prototype.upload = function (request) {
        return this.client.call("space", "Upload", request);
    };
    return SpaceService;
}());
exports.SpaceService = SpaceService;
