import * as m3o from "@m3o/m3o-node";
export class UserService {
    constructor(token) {
        this.client = new m3o.Client({ token: token });
    }
    // Create a new user account. The email address and username for the account must be unique.
    create(request) {
        return this.client.call("user", "Create", request);
    }
    // Delete an account by id
    delete(request) {
        return this.client.call("user", "Delete", request);
    }
    // List all users. Returns a paged list of results
    list(request) {
        return this.client.call("user", "List", request);
    }
    // Login using username or email. The response will return a new session for successful login,
    // 401 in the case of login failure and 500 for any other error
    login(request) {
        return this.client.call("user", "Login", request);
    }
    // Logout of all user's sessions
    logoutAll(request) {
        return this.client.call("user", "LogoutAll", request);
    }
    // Logout a user account
    logout(request) {
        return this.client.call("user", "Logout", request);
    }
    // Read an account by id, username or email. Only one need to be specified.
    read(request) {
        return this.client.call("user", "Read", request);
    }
    // Read a session by the session id. In the event it has expired or is not found and error is returned.
    readSession(request) {
        return this.client.call("user", "ReadSession", request);
    }
    // Reset password with the code sent by the "SendPasswordResetEmail" endpoint.
    resetPassword(request) {
        return this.client.call("user", "ResetPassword", request);
    }
    // Login using email only - Passwordless
    sendMagicLink(request) {
        return this.client.call("user", "SendMagicLink", request);
    }
    // Send an email with a verification code to reset password.
    // Call "ResetPassword" endpoint once user provides the code.
    sendPasswordResetEmail(request) {
        return this.client.call("user", "SendPasswordResetEmail", request);
    }
    // Send a verification email to a user.
    sendVerificationEmail(request) {
        return this.client.call("user", "SendVerificationEmail", request);
    }
    // Update the account password
    updatePassword(request) {
        return this.client.call("user", "UpdatePassword", request);
    }
    // Update the account username or email
    update(request) {
        return this.client.call("user", "Update", request);
    }
    // Verify the email address of an account from a token sent in an email to the user.
    verifyEmail(request) {
        return this.client.call("user", "VerifyEmail", request);
    }
    // Check whether the token attached to MagicLink is valid or not.
    // Ideally, you need to call this endpoint from your http request
    // handler that handles the endpoint which is specified in the
    // SendMagicLink request.
    verifyToken(request) {
        return this.client.call("user", "VerifyToken", request);
    }
}
