"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserService = void 0;
var m3o = __importStar(require("@m3o/m3o-node"));
var UserService = /** @class */ (function () {
    function UserService(token) {
        this.client = new m3o.Client({ token: token });
    }
    // Create a new user account. The email address and username for the account must be unique.
    UserService.prototype.create = function (request) {
        return this.client.call("user", "Create", request);
    };
    // Delete an account by id
    UserService.prototype.delete = function (request) {
        return this.client.call("user", "Delete", request);
    };
    // List all users. Returns a paged list of results
    UserService.prototype.list = function (request) {
        return this.client.call("user", "List", request);
    };
    // Login using username or email. The response will return a new session for successful login,
    // 401 in the case of login failure and 500 for any other error
    UserService.prototype.login = function (request) {
        return this.client.call("user", "Login", request);
    };
    // Logout of all user's sessions
    UserService.prototype.logoutAll = function (request) {
        return this.client.call("user", "LogoutAll", request);
    };
    // Logout a user account
    UserService.prototype.logout = function (request) {
        return this.client.call("user", "Logout", request);
    };
    // Read an account by id, username or email. Only one need to be specified.
    UserService.prototype.read = function (request) {
        return this.client.call("user", "Read", request);
    };
    // Read a session by the session id. In the event it has expired or is not found and error is returned.
    UserService.prototype.readSession = function (request) {
        return this.client.call("user", "ReadSession", request);
    };
    // Reset password with the code sent by the "SendPasswordResetEmail" endpoint.
    UserService.prototype.resetPassword = function (request) {
        return this.client.call("user", "ResetPassword", request);
    };
    // Login using email only - Passwordless
    UserService.prototype.sendMagicLink = function (request) {
        return this.client.call("user", "SendMagicLink", request);
    };
    // Send an email with a verification code to reset password.
    // Call "ResetPassword" endpoint once user provides the code.
    UserService.prototype.sendPasswordResetEmail = function (request) {
        return this.client.call("user", "SendPasswordResetEmail", request);
    };
    // Send a verification email to a user.
    UserService.prototype.sendVerificationEmail = function (request) {
        return this.client.call("user", "SendVerificationEmail", request);
    };
    // Update the account password
    UserService.prototype.updatePassword = function (request) {
        return this.client.call("user", "UpdatePassword", request);
    };
    // Update the account username or email
    UserService.prototype.update = function (request) {
        return this.client.call("user", "Update", request);
    };
    // Verify the email address of an account from a token sent in an email to the user.
    UserService.prototype.verifyEmail = function (request) {
        return this.client.call("user", "VerifyEmail", request);
    };
    // Check whether the token attached to MagicLink is valid or not.
    // Ideally, you need to call this endpoint from your http request
    // handler that handles the endpoint which is specified in the
    // SendMagicLink request.
    UserService.prototype.verifyToken = function (request) {
        return this.client.call("user", "VerifyToken", request);
    };
    return UserService;
}());
exports.UserService = UserService;
