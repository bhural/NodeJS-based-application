export declare class DbService {
    private client;
    constructor(token: string);
    count(request: CountRequest): Promise<CountResponse>;
    create(request: CreateRequest): Promise<CreateResponse>;
    delete(request: DeleteRequest): Promise<DeleteResponse>;
    dropTable(request: DropTableRequest): Promise<DropTableResponse>;
    listTables(request: ListTablesRequest): Promise<ListTablesResponse>;
    read(request: ReadRequest): Promise<ReadResponse>;
    renameTable(request: RenameTableRequest): Promise<RenameTableResponse>;
    truncate(request: TruncateRequest): Promise<TruncateResponse>;
    update(request: UpdateRequest): Promise<UpdateResponse>;
}
export interface CountRequest {
    table?: string;
}
export interface CountResponse {
    count?: number;
}
export interface CreateRequest {
    id?: string;
    record?: {
        [key: string]: any;
    };
    table?: string;
}
export interface CreateResponse {
    id?: string;
}
export interface DeleteRequest {
    id?: string;
    table?: string;
}
export interface DeleteResponse {
}
export interface DropTableRequest {
    table?: string;
}
export interface DropTableResponse {
}
export interface ListTablesRequest {
}
export interface ListTablesResponse {
    tables?: string[];
}
export interface ReadRequest {
    id?: string;
    limit?: number;
    offset?: number;
    order?: string;
    orderBy?: string;
    query?: string;
    table?: string;
}
export interface ReadResponse {
    records?: {
        [key: string]: any;
    }[];
}
export interface RenameTableRequest {
    from?: string;
    to?: string;
}
export interface RenameTableResponse {
}
export interface TruncateRequest {
    table?: string;
}
export interface TruncateResponse {
}
export interface UpdateRequest {
    id?: string;
    record?: {
        [key: string]: any;
    };
    table?: string;
}
export interface UpdateResponse {
}
