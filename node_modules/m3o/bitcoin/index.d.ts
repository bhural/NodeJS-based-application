export declare class BitcoinService {
    private client;
    constructor(token: string);
    balance(request: BalanceRequest): Promise<BalanceResponse>;
    lookup(request: LookupRequest): Promise<LookupResponse>;
    price(request: PriceRequest): Promise<PriceResponse>;
    transaction(request: TransactionRequest): Promise<TransactionResponse>;
}
export interface BalanceRequest {
    address?: string;
}
export interface BalanceResponse {
    balance?: number;
}
export interface Input {
    prev_out?: Prev;
    script?: string;
}
export interface LookupRequest {
    address?: string;
    limit?: number;
    offset?: number;
}
export interface LookupResponse {
    address?: string;
    final_balance?: number;
    hash?: string;
    num_tx?: number;
    num_unredeemed?: number;
    total_received?: number;
    total_sent?: number;
    transactions?: Transaction[];
}
export interface Output {
    address?: string;
    hash?: string;
    script?: string;
    spent?: boolean;
    tx_index?: number;
    value?: number;
}
export interface Prev {
    address?: string;
    n?: number;
    script?: string;
    spent?: boolean;
    tx_index?: number;
    value?: number;
}
export interface PriceRequest {
    symbol?: string;
}
export interface PriceResponse {
    price?: number;
    symbol?: string;
}
export interface Transaction {
    balance?: number;
    block_height?: number;
    block_index?: number;
    double_spend?: boolean;
    fee?: number;
    hash?: string;
    inputs?: Input[];
    lock_time?: number;
    outputs?: Output[];
    relay?: string;
    result?: number;
    size?: number;
    tx_index?: number;
    version?: number;
    vin_sz?: number;
    vout_sz?: number;
    weight?: number;
}
export interface TransactionRequest {
    hash?: string;
}
export interface TransactionResponse {
    block_height?: number;
    block_index?: number;
    double_spend?: boolean;
    fee?: number;
    hash?: string;
    inputs?: Input[];
    lock_time?: number;
    outputs?: Output[];
    relay?: string;
    size?: number;
    tx_index?: number;
    version?: number;
    vin_sz?: number;
    vout_sz?: number;
    weight?: number;
}
