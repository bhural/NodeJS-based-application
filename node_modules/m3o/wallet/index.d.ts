export declare class WalletService {
    private client;
    constructor(token: string);
    balance(request: BalanceRequest): Promise<BalanceResponse>;
    create(request: CreateRequest): Promise<CreateResponse>;
    credit(request: CreditRequest): Promise<CreditResponse>;
    debit(request: DebitRequest): Promise<DebitResponse>;
    delete(request: DeleteRequest): Promise<DeleteResponse>;
    list(request: ListRequest): Promise<ListResponse>;
    read(request: ReadRequest): Promise<ReadResponse>;
    transactions(request: TransactionsRequest): Promise<TransactionsResponse>;
    transfer(request: TransferRequest): Promise<TransferResponse>;
}
export interface Account {
    balance?: number;
    description?: string;
    id?: string;
    name?: string;
}
export interface BalanceRequest {
    id?: string;
}
export interface BalanceResponse {
    balance?: number;
}
export interface CreateRequest {
    description?: string;
    id?: string;
    name?: string;
}
export interface CreateResponse {
    account?: {
        [key: string]: any;
    };
}
export interface CreditRequest {
    amount?: number;
    id?: string;
    idempotency_key?: string;
    reference?: string;
    visible?: boolean;
}
export interface CreditResponse {
    balance?: number;
}
export interface DebitRequest {
    amount?: number;
    id?: string;
    idempotency_key?: string;
    reference?: string;
    visible?: boolean;
}
export interface DebitResponse {
    balance?: number;
}
export interface DeleteRequest {
    id?: string;
}
export interface DeleteResponse {
}
export interface ListRequest {
}
export interface ListResponse {
    accounts?: Account[];
}
export interface ReadRequest {
    id?: string;
}
export interface ReadResponse {
    account?: {
        [key: string]: any;
    };
}
export interface Transaction {
    amount?: number;
    created?: string;
    id?: string;
    metadata?: {
        [key: string]: string;
    };
    reference?: string;
}
export interface TransactionsRequest {
    id?: string;
}
export interface TransactionsResponse {
    transactions?: Transaction[];
}
export interface TransferRequest {
    amount?: number;
    from_id?: string;
    reference?: string;
    to_id?: string;
    visible?: boolean;
}
export interface TransferResponse {
}
